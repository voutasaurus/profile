alias kubectx='kubectl config current-context'

alias kubesh='kubectl run session-$USER --restart=Never --generator=run-pod/v1 --rm -i --tty --image=centos -- bash'

function kubens {
	kubectl get namespaces -o go-template='{{ range $x, $v := .items }}{{$v.metadata.name | printf "%s\n"}}{{ end }}'
}

function kubesvc {
	xargs -I nspace kubectl --namespace=nspace get services -o go-template='{{ range $x, $v := .items }}{{$v.metadata.name | printf "%s.nspace.svc.cluster.local\n"}}{{ end }}'
}

function kubeports {
	xargs -I nspace kubectl --namespace=nspace get services -o go-template='{{ range $x, $v := .items }}{{range $j, $port := $v.spec.ports}}{{printf "%s.nspace.svc.cluster.local:%v\n" $v.metadata.name $port.port}}{{end}}{{ end }}'
}

function kubedomains {
	kubens | grep -v "kube-system" | grep -v "kube-public" | kubesvc
}

function kubeaddrs {
	kubens | grep -v "kube-system" | grep -v "kube-public" | kubeports
}

# usage: kubewarp service.namespace.svc.cluster.local:12345
# The internal domain:port is as output by kubeaddrs
function kubewarp {
	local domain=$(echo $1 | cut -d ":" -f 1)
	local port=$(echo $1 | cut -d ":" -f 2)
	local host=$(echo $domain | cut -d "." -f 1)
	local namespace=$(echo $domain | cut -d "." -f 2)
	kubectl --namespace=$namespace port-forward svc/$host $port:$port
}

# usage: ctx gs://bucketname/envname
function ctx {
  if [ $# -eq 0 ]; then
    gsutil ls -a gs://bucketname | cut -f1 -d"#" | sort -u
    return
  fi

  temp=$(mktemp)
  gsutil cp $1 temp &> /dev/null
  chmod +x temp
  source temp
  rm temp
}

function zipdiff {
	current=$(pwd)
	before="$current/$1"
	after="$current/$2"
	tempdir=$(mktemp -d)
	cd $tempdir
	git init &> /dev/null
	unzip -qq $before *
	git add . &> /dev/null
	git commit -m "before" &> /dev/null
	rm -rf $tempdir/*
	yes | unzip -qq $after * &> /dev/null
	git add .
	git diff --cached
	cd $current
	rm -rf $tempdir
}
